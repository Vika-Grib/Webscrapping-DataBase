"""
Задание 3: Отчет по холодному кошельку криптовалютной биржи CryptoCoin
Условие:
Платформа криптовалютной биржи "CryptoCoin" использует специальный тип оборудования, называемый "холодный" кошелек, для защиты своих активов от хакеров.

В рамках разработки административной панели создайте запрос, который возвращает список адресов, количество исходящих и входящих транзакций и баланс холодных кошельков Ethereum, рассчитанный на основе движения средств между этими кошельками в 2021 году.

Результат должен содержать следующие столбцы: wallet | outgoing | incoming | balance.

wallet: адрес кошелька
outgoing: общее количество исходящих транзакций для конкретного кошелька
incoming: общее количество входящих транзакций для конкретного кошелька
balance: баланс для конкретного кошелька, рассчитанный как сумма всех входящих (положительных) и всех исходящих (отрицательных) транзакций
Результат должен быть отсортирован по возрастанию по wallet.

Примечание:

Некоторые кошельки могут иметь отрицательный результирующий баланс, что приемлемо из-за ограниченного временного интервала транзакций.
В отчете должны быть включены только транзакции за 2021 год.
Схема таблицы:

scss
Копировать код
transactions
-------------
dt        | VARCHAR(19)  | Datetime
sender    | VARCHAR(42)  |
recipient | VARCHAR(42)  |
amount    | DECIMAL(10,6)|
Пример данных:

markdown
Копировать код
dt                  | sender                                  | recipient                               | amount
--------------------------------------------------------------------------------------------------------
2021-06-11 16:42:31 | 0x1ae082f2a5f0cf6876e5e50248684e9d9f99b477 | 0x899a5e02ec0ffb68f8c961209e7316daa8379096 | 395.928242
2021-03-22 11:32:07 | 0x1ae082f2a5f0cf6876e5e50248684e9d9f99b477 | 0xf87b3518df6e7d15106b68ee9eaca3886da78310 | 796.632705
2021-01-22 03:52:15 | 0x1ae082f2a5f0cf6876e5e50248684e9d9f99b477 | 0x899a5e02ec0ffb68f8c961209e7316daa8379096 | 303.929821
Пример ожидаемого результата:

markdown
Копировать код
wallet                                    | outgoing | incoming | balance
--------------------------------------------------------------------------------
0x1ae082f2a5f0cf6876e5e50248684e9d9f99b477 | 10       | 4        | -2106.990050
0x899a5e02ec0ffb68f8c961209e7316daa8379096 | 2        | 7        | 2629.640017
0xf87b3518df6e7d15106b68ee9eaca3886da78310 | 3        | 4        | -522.649967
Решение:
Чтобы создать запрос, который возвращает нужные данные, следуйте инструкциям:

Отфильтруйте транзакции за 2021 год.
Рассчитайте количество исходящих и входящих транзакций для каждого кошелька.
Рассчитайте баланс для каждого кошелька.
Объедините результаты и отсортируйте по адресу кошелька."""
import sqlite3

#
#
# # Соединяемся с базой данных (если файла базы данных не существует, он будет создан)
# conn = sqlite3.connect('transactions.db')
# cursor = conn.cursor()
#
#
# # Создаем таблицу transactions
# cursor.execute('''
# CREATE TABLE transactions (
#     dt TEXT,
#     sender TEXT,
#     recipient TEXT,
#     amount REAL
# )
# ''')
#
# # Вставляем данные в таблицу
# transactions_data = [
#     ('2021-01-01 10:00:00', '0xA', '0xB', 10.00),
#     ('2021-01-02 11:00:00', '0xA', '0xC', 20.00),
#     ('2021-01-03 12:00:00', '0xB', '0xA', 5.00),
#     ('2021-01-04 13:00:00', '0xC', '0xA', 15.00),
#     ('2021-06-11 16:42:31', '0x1ae082f2a5f0cf6876e5e50248684e9d9f99b477', '0x899a5e02ec0ffb68f8c961209e7316daa8379096', 395.928242),
#     ('2021-03-22 11:32:07', '0x1ae082f2a5f0cf6876e5e50248684e9d9f99b477', '0xf87b3518df6e7d15106b68ee9eaca3886da78310', 796.632705),
#     ('2021-01-22 03:52:15', '0x1ae082f2a5f0cf6876e5e50248684e9d9f99b477', '0x899a5e02ec0ffb68f8c961209e7316daa8379096', 303.929821),
#     ('2021-11-11 00:47:33', '0xf87b3518df6e7d15106b68ee9eaca3886da78310', '0x1ae082f2a5f0cf6876e5e50248684e9d9f99b477', 403.647645)
# ]
#
# cursor.executemany('''
# INSERT INTO transactions (dt, sender, recipient, amount)
# VALUES (?, ?, ?, ?)
# ''', transactions_data)
#
# # Сохраняем изменения и закрываем соединение
# conn.commit()
# conn.close()



conn = sqlite3.connect('transactions.db')
cursor = conn.cursor()


# Выполняем запрос
query = '''
SELECT
    wallet,
    SUM(outgoing_count) AS outgoing,
    SUM(incoming_count) AS incoming,
    SUM(incoming_amount) - SUM(outgoing_amount) AS balance
FROM (
    SELECT
        sender AS wallet,
        COUNT(*) AS outgoing_count,
        0 AS incoming_count,
        0 AS incoming_amount,
        SUM(amount) AS outgoing_amount
    FROM transactions
    WHERE dt LIKE '2021%'
    GROUP BY sender
    UNION ALL
    SELECT
        recipient AS wallet,
        0 AS outgoing_count,
        COUNT(*) AS incoming_count,
        SUM(amount) AS incoming_amount,
        0 AS outgoing_amount
    FROM transactions
    WHERE dt LIKE '2021%'
    GROUP BY recipient
) AS combined
GROUP BY wallet
ORDER BY wallet;
'''


# Выполняем запрос и получаем результат
cursor.execute(query)
rows = cursor.fetchall()

# Выводим результат
for row in rows:
    print(row)

# Закрываем соединение
conn.close()




"""Объяснение:
Первый подзапрос: Подсчитывает количество исходящих транзакций и суммы для каждого отправителя (sender).
Второй подзапрос: Подсчитывает количество входящих транзакций и суммы для каждого получателя (recipient).
Объединение (UNION ALL): Объединяет результаты двух подзапросов.
Внешний запрос: Группирует результаты по кошелькам (wallet), суммирует количество транзакций и вычисляет баланс как разницу между входящими и исходящими суммами.
Сортировка: Результаты сортируются по адресу кошелька."""